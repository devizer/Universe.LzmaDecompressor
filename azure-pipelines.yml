trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '**'

jobs:

- job: 'Tests'
  pool:
    vmImage: $(image)
  timeoutInMinutes: 360
  strategy:
    maxParallel: 9  
    matrix:
      'windows-2022':
        image: windows-2022
      'windows-2019':
        image: windows-2019
      'ubuntu-18.04':
        image: ubuntu-18.04
      'ubuntu-20.04':
        image: ubuntu-20.04
      'macOS-11':
        image: macOS-11
      'macOS-10.15':
        image: macOS-10.15

  steps:
  - bash: |
      set -eu; set -o pipefail
      printenv | sort || true
      echo "BASH_VERSION: $BASH_VERSION"
      echo "CURL Version: $(curl --version)"
      dotnet --info
      cd Universe.LzmaDecompressor.Tests
      dotnet test -c Release --collect:"XPlat Code Coverage" --logger trx # 2>&1 | tee $(System.ARTIFACTSDIRECTORY)/test.log
      if [[ "$AGENT_OS" == Linux ]]; then
        file=EXTRA-4GB-Plus.code;
        echo "PREPARING 4+ Gb Test: [$file]"
        cd The-Oldest-Lzma-Test-Data
        time dd if=/dev/random of="$file" count=$(( 4 * 1024 + 333 )) bs=$(( 1024 * 1024 ))
        ls -laS
        sudo apt-get install pv -y -qq >/dev/null
        pv "$file" -B32000000 -f | time xz --format=lzma -f -z -1 -T2 > "${file}.lzma"
        ls -laS
        cd ..
        dotnet test -c Release
      fi
    displayName: 'Tests'


  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)'
      artifactName: '$(Agent.JobName)'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'
